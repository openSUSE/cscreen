#!/bin/sh
# Copyright (c) 2011 SUSE Linux Products GmbH, Nuernberg, Germany.
# All rights reserved.
#
# Author: Lars Vogdt
#
# /etc/init.d/cscreen
#   and its symbolic link
# /(usr/)sbin/rccscreen
#
### BEGIN INIT INFO
# Provides:          cscreen
# Required-Start:    $network $named $remote_fs
# Should-Start:      $time sendmail
# Required-Stop:     $network $named $remote_fs
# Should-Stop: $time sendmail
# Default-Start:     3 5
# Default-Stop:      0 1 2 6
# Short-Description: cscreen providing access to other hosts
# Description:       Start cscreen to provide access to hosts
#       via the screen command.
### END INIT INFO
# 

PATH=/bin:/usr/bin:/sbin:/usr/sbin
export PATH

SCREEN_OWNER='_cscreen'
SCREEN_NAME='console'
SCREENRC='/etc/cscreenrc'
SCREEN_HISTORY="20000"
SCREEN_SHELL='/usr/share/cscreen/cscreen-shell'
sysconfig='/etc/sysconfig/cscreen'
screen='/usr/bin/screen'
pidfile='/var/run/cscreen.pid'

test -x "$screen" || { echo "$screen not installed";
	if [ "$1" = "stop" ]; then exit 0;
	else exit 5; fi;
}
test -r "$sysconfig" || { echo "$sysconfig not existing";
    if [ "$1" = "stop" ]; then exit 0;
        else exit 6; fi;
}

. "$sysconfig"

test -r "$SCREENRC" || { echo "$SCREENRC not existing";
	if [ "$1" = "stop" ]; then exit 0;
        else exit 6; fi;
}

function test_screen(){
	$screen -q -ls $SCREEN_OWNER/$SCREEN_NAME < /dev/null > /dev/null 2>&1
	errmsg=$?
	if [ $errmsg -gt 10 ]; then
		return 0
	else
		return 1
	fi
}

function getpid(){
	PID=$(ps aux | grep -i 'screen' | grep $SCREEN_OWNER | grep $SCREEN_NAME | awk '" " { print $2 }')
	echo "$PID"
}

# Shell functions sourced from /etc/rc.status
. /etc/rc.status

# Reset status of this service
rc_reset

case "$1" in
    start)
        echo -n "Starting cscreen "
        test_screen
        ret=$?
        case $ret in 
            0) echo "already running "
            ;;
            *)
                createcmd="(ulimit -n $SCREEN_FILE_LIMIT; $screen -wipe $SCREEN_NAME; $screen -h $SCREEN_HISTORY -s $SCREEN_SHELL -d -m -S $SCREEN_NAME -c $SCREENRC) < /dev/null > /dev/null 2>&1"
                su $SCREEN_OWNER -c "/bin/sh -c '$createcmd'"
            ;;
        esac
        PID=$(getpid)
        echo "$PID" > "$pidfile"
        rc_status -v
    ;;
    stop)
        echo -n "Shutting down cscreen "
        test_screen
        ret=$?
        case $ret in
                0) su $SCREEN_OWNER -c "screen -S $SCREEN_NAME -X quit"
                   killproc -p "$pidfile" $screen
                ;;
                *) echo "not running "
                ;;
        esac
        test -f $pidfile && rm $pidfile
        rc_failed 0
        rc_status -v
    ;;
    try-restart|condrestart)
        if test "$1" = "condrestart"; then
                echo "${attn} Use try-restart ${done}(LSB)${attn} rather than condrestart ${warn}(RH)${norm}"
        fi
        $0 status
        if test $? = 0; then
                $0 restart
        else
                rc_reset        # Not running is not a failure.
        fi
        rc_status
    ;;
    restart)
        $0 stop
        $0 start
        rc_status
    ;;
    status)
        echo -n "Checking for cscreen "
        test_screen
        ret=$?
        case $ret in
            0) rc_failed 0
            ;;
            *) rc_failed 1
            ;;
        esac
        rc_status -v
    ;;
    probe)
        test "$screenrc" -nt "$pidfile" && echo reload
    ;;
    *)
        echo "Usage: $0 {start|stop|status|try-restart|restart|force-reload|reload|probe}"
        exit 1
        ;;
esac
rc_exit

